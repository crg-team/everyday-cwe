{{#*inline "page"}}
<div class="layout">
  <p>Research Concepts</p>
  <div class="box">
      <p id="current-cwe">{{currentCWE}}</p>
      <span>Incorrect Permission Assignment for Critical Resource</span>
  </div>
</div>
<script>
let hexNames = [];
const hexRadius = 40;

const hexRelations = {

};

function axialFromXY(x, y, r) {
  const q = (x * 2/3) / r;
  const rr = ((-x / 3) + (Math.sqrt(3)/3) * y) / r;
  return [Math.round(q), Math.round(rr)];
}
function getAllChildren(name, result=new Set()) {
  const rel = hexRelations[name];
  if (rel && rel.children) {
    rel.children.forEach(child => {
      if (!result.has(child)) {
        result.add(child);
        getAllChildren(child, result);
      }
    });
  }
  return result;
}

function generateHexesData(x0, y0, x1, y1, k) {
  const r = hexRadius * k;
  const hexbin = d3.hexbin().radius(r).extent([[x0, y0], [x1, y1]]);
  const points = [];
  for (let y = y0 - r*2; y < y1 + r*2; y += r * Math.sqrt(3) / 2) {
    for (let x = x0 - r*2; x < x1 + r*2; x += r * 3 / 2) {
      points.push([x, y]);
    }
  }
  let hexNum = 0;
  return hexbin(points).map((d, i) => {
    hexNum += 1;
    const name = `CWE-${String(hexNum).padStart(3, '0')}`;
    const [col, row] = axialFromXY((d.x-x0)/k, (d.y-y0)/k, hexRadius);
    return { ...d, col, row, name };
  });
}

const svg = d3.select('body')
  .append('svg')
  .attr('width', window.innerWidth)
  .attr('height', window.innerHeight)
  .style('display', 'block')
  .style('margin', 0)
  .style('position', 'fixed')
  .style('top', 0)
  .style('left', 0)
  .style('background', '#f9f9f9');

const gHex = svg.append('g');

function renderHexes(transform) {
  const x0 = -transform.x/transform.k, y0 = -transform.y/transform.k;
  const x1 = (window.innerWidth-transform.x)/transform.k, y1 = (window.innerHeight-transform.y)/transform.k;
  const hexesData = generateHexesData(x0, y0, x1, y1, transform.k);
  hexNames = hexesData.map(d => d.name);

  let hexes = gHex.selectAll('path').data(hexesData, d => d.name);
  hexes.exit().remove();
  const hexesEnter = hexes.enter().append('path')
    .attr('d', d3.hexbin().radius(hexRadius * transform.k).hexagon())
    .attr('transform', d => `translate(${d.x},${d.y})`)
    .attr('fill', '#fff')
    .attr('stroke', '#bbb')
    .attr('stroke-width', 1.2/transform.k)
    .style('transition', 'fill 0.2s, transform 0.2s');
  hexes = hexesEnter.merge(hexes);

  hexes.on('mouseover', function(e, d) {
    document.getElementById('current-cwe').textContent = d.name;
    const rel = hexRelations[d.name] || {};
    const highlightSet = new Set([d.name]);
    if (rel.parent) highlightSet.add(rel.parent);
    getAllChildren(d.name, highlightSet);

    hexes.transition().duration(180)
      .attr('fill', d2 => {
        if (d2.name === d.name) return '#e41a1c';
        if (rel.parent && d2.name === rel.parent) return '#377eb8';
        if (getAllChildren(d.name).has(d2.name)) return '#888';
        return '#fff';
      })
      .attr('transform', d2 => {
        if (d2.name === d.name) return `translate(${d2.x},${d2.y}) scale(1.15)`;
        return `translate(${d2.x},${d2.y}) scale(1)`;
      });
  }).on('mouseout', function() {

    document.getElementById('current-cwe').textContent =
      hexNames.length ? hexNames[Math.floor(Math.random() * hexNames.length)] : '';
    hexes.transition().duration(180)
      .attr('fill', '#fff')
      .attr('transform', d => `translate(${d.x},${d.y}) scale(1)`);
  });
}

const minZoom = 0.8;
const maxZoom = 1.3;

const zoom = d3.zoom()
  .scaleExtent([minZoom, maxZoom])
  .translateExtent([
    [ -window.innerWidth * maxZoom, -window.innerHeight * maxZoom ],
    [ window.innerWidth * maxZoom * 2, window.innerHeight * maxZoom * 2 ]
  ])
  .on('zoom', ({transform}) => {
    gHex.attr('transform', transform);
    renderHexes(transform);
  });

svg.call(zoom);

renderHexes(d3.zoomIdentity);

window.addEventListener('resize', () => {
  svg.attr('width', window.innerWidth).attr('height', window.innerHeight);
  renderHexes(d3.zoomTransform(svg.node()));
});

window.addEventListener('DOMContentLoaded', () => {
  if (hexNames.length) {
    document.getElementById('current-cwe').textContent =
      hexNames[Math.floor(Math.random() * hexNames.length)];
  }
});
</script>
{{/inline}}
{{~> (lookup this "parent")~}}
